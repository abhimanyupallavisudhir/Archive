})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 4, 4)
# We will construct a function that evolves as exposed to more data.
# theories[n](theta) represents the pdf upon exposure to first n data pts
# so we have an iterative process, where x is the nth data point:
# theories[n](theta) = theories[n-1](theta) * dsim(x, theta) /
#   integrate(function(phi) theories[n-1](phi) * dsim(x, phi))
interfere = function(prior, x){
function(theta) { prior(theta) * dsim(x, theta) /
integrate(function(phi) prior(phi) * dsim(x, phi)) }
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
data_point = data[i]
posterior = interfere(prior, data_point)
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 4, 4)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
if (data[i] == 1){
posterior = interfere_success(prior)
} else if (data[i] == 0){
posterior = interfere_failure(prior)
}
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 4, 4)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
if (data[i] == 1){
posterior = interfere_success(prior)
} else if (data[i] == 0){
posterior = interfere_failure(prior)
}
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 6, 6)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
if (data[i] == 1){
posterior = interfere_success(prior)
} else if (data[i] == 0){
posterior = interfere_failure(prior)
}
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 6, 6)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere = function(prior, x){
if(x == 1){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
} else if(x == 0){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
}
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
posterior = interfere(prior, data[i])
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 6, 6)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere = function(prior, x){
function(theta) { prior(theta) * dbinom(x, 1, theta) /
integrate(function(phi) prior(phi) * dbinom(x, 1, phi)) }
}
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
posterior = interfere(prior, data[i])
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
?dbinom
dbinom(1, 1, 1/3)
dbinom(0, 1, 1/3)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 6, 6)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere = function(prior, x){
function(p) { prior(p) * dbinom(x, 1, p) /
integrate(function(phi) prior(phi) * dbinom(x, 1, phi)) }
}
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
posterior = interfere(prior, data[i])
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 6, 6)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere = function(prior, x){
function(p) { prior(p) * dbinom(x, 1, p) /
integrate(function(phi) prior(phi) * dbinom(x, 1, phi))$value }
}
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
posterior = interfere(prior, data[i])
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 6, 6)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere = function(prior, x){
overall = integrate(function(phi) prior(phi) * dbinom(x, 1, phi))$value
function(p) { prior(p) * dbinom(x, 1, p) / overall }
}
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
posterior = interfere(prior, data[i])
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(rsconnect)
library(stats)
ui = fluidPage(
sliderInput(inputId = 'time',
label = 'Number of data points gathered',
value = 1, step = 1, min = 1, max = 100,
animate = animationOptions(interval = 100, loop = TRUE)),
plotOutput(outputId = 'beliefs'),
tags$script("$(document).ready(function(){
setTimeout(function(){$('.slider-animate-button').click()},10);});")
)
server = function(input, output){
output$beliefs = renderPlot({
# Generate data and create density function (for inference)
data = rbinom(100, 1, 1/3)
dsim = function(x, theta) dbinom(x, 1, theta)
# prior distribution we assume: beta with parameters prior_alpha, prior_beta
theory = function(theta) dbeta(theta, 6, 6)
# We will construct a function that evolves as exposed to more data.
# theory[n](p) represents the pdf upon being exposed to the first n units of data
# so we have an iterative process (easy to prove with Bayes's theorem):
# If success: theory[n](p) = theory[n-1](p) * p / E_{n-1}(p)
# If failure: theory[n](p) = theory[n-1](p) * (1 - p) / (1 - E_{n-1}(p))
interfere = function(prior, x){
overall = integrate(function(phi) prior(phi) * dbinom(x, 1, phi), 0, 1)$value
function(p) { prior(p) * dbinom(x, 1, p) / overall }
}
interfere_success = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * p / mu_prior
}
interfere_failure = function(prior){
mu_prior = integrate(function(p) p * prior(p), 0, 1)$value
function(p) prior(p) * (1 - p) / (1 - mu_prior)
}
# initialize theories
theories = c(theory)
# update theories
for (i in 1:100){
prior = theories[[i]]
posterior = interfere(prior, data[i])
theories = c(theories, posterior)
}
p = seq(0, 1, 0.001)
plot(p, theories[[input$time]](p), 'l', ylim = c(0, 12))
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
?stat_function
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
runApp('C:/Users/abhim/OneDrive/PRIMARY/Education/Imperial/Course_contents/Y2T1/M2S1/R/Bayesian inference.R')
rsconnect::setAccountInfo(name='abhimanyups', token='EBE83D05BAB0DB6C91F5E21EAD332D57', secret='ErU1KloUOg7plECBlTrwlrKhnTqJq3vdMOmpYfpT')
rsconnect::setAccountInfo(name='abhimanyups', token='EBE83D05BAB0DB6C91F5E21EAD332D57', secret='ErU1KloUOg7plECBlTrwlrKhnTqJq3vdMOmpYfpT')
library(shiny)
library(rsconnect)
setwd("C:/Users/abhim/OneDrive/PRIMARY/Miscellaneous/Programming/RShiny")
runApp()
deployApp()
